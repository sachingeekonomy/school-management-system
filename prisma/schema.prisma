generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
  password String
}

model Student {
  id          String       @id
  username    String       @unique
  password    String
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  classId     Int
  gradeId     Int
  birthday    DateTime
  attendances Attendance[]
  payments    Payment[]
  results     Result[]
  class       Class        @relation(fields: [classId], references: [id])
  grade       Grade        @relation(fields: [gradeId], references: [id])
  parent      Parent       @relation(fields: [parentId], references: [id])
}

model Teacher {
  id        String    @id
  username  String    @unique
  password  String
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  birthday  DateTime
  classes   Class[]
  lessons   Lesson[]
  subjects  Subject[] @relation("SubjectToTeacher")
}

model Parent {
  id        String    @id
  username  String    @unique
  password  String
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classess Class[]
  students Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  announcements Announcement[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Student[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  lessons  Lesson[]
  teachers Teacher[] @relation("SubjectToTeacher")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  classId     Int
  teacherId   String
  assignments Assignment[]
  attendances Attendance[]
  exams       Exam[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Financial {
  id          Int      @id @default(autoincrement())
  month       String
  year        Int
  income      Float
  expense     Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id         Int                @id @default(autoincrement())
  title      String
  content    String
  date       DateTime           @default(now())
  senderId   String
  sender     User               @relation("SentMessages", fields: [senderId], references: [id])
  recipients MessageRecipient[]
}

model MessageRecipient {
  id          Int       @id @default(autoincrement())
  messageId   Int
  recipientId String
  isRead      Boolean   @default(false)
  readAt      DateTime?
  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  recipient   User      @relation("MessageRecipients", fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([messageId, recipientId])
}

model User {
  id                String             @id
  username          String             @unique
  name              String
  surname           String
  email             String?            @unique
  phone             String?            @unique
  role              UserRole
  createdAt         DateTime           @default(now())
  sentMessages      Message[]          @relation("SentMessages")
  messageRecipients MessageRecipient[] @relation("MessageRecipients")
}

model Payment {
  id            String        @id @default(cuid())
  studentId     String
  amount        Float
  paymentType   PaymentType
  paymentMethod PaymentMethod
  dueDate       DateTime
  description   String?
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  student       Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([status])
  @@index([paymentType])
  @@index([dueDate])
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum PaymentType {
  TUITION
  EXAM
  TRANSPORT
  LIBRARY
  OTHER
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
  ONLINE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
